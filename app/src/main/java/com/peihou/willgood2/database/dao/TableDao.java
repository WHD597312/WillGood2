package com.peihou.willgood2.database.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.peihou.willgood2.pojo.Table;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TABLE".
*/
public class TableDao extends AbstractDao<Table, Long> {

    public static final String TABLENAME = "TABLE";

    /**
     * Properties of entity Table.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property DeviceId = new Property(1, long.class, "deviceId", false, "DEVICE_ID");
        public final static Property DeviceMac = new Property(2, String.class, "deviceMac", false, "DEVICE_MAC");
        public final static Property I = new Property(3, int.class, "i", false, "I");
        public final static Property Name = new Property(4, String.class, "name", false, "NAME");
        public final static Property Data = new Property(5, double.class, "data", false, "DATA");
        public final static Property Factor = new Property(6, double.class, "factor", false, "FACTOR");
        public final static Property Result = new Property(7, double.class, "result", false, "RESULT");
        public final static Property Unit = new Property(8, String.class, "unit", false, "UNIT");
    }


    public TableDao(DaoConfig config) {
        super(config);
    }
    
    public TableDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TABLE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"DEVICE_ID\" INTEGER NOT NULL ," + // 1: deviceId
                "\"DEVICE_MAC\" TEXT," + // 2: deviceMac
                "\"I\" INTEGER NOT NULL ," + // 3: i
                "\"NAME\" TEXT," + // 4: name
                "\"DATA\" REAL NOT NULL ," + // 5: data
                "\"FACTOR\" REAL NOT NULL ," + // 6: factor
                "\"RESULT\" REAL NOT NULL ," + // 7: result
                "\"UNIT\" TEXT);"); // 8: unit
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TABLE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Table entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getDeviceId());
 
        String deviceMac = entity.getDeviceMac();
        if (deviceMac != null) {
            stmt.bindString(3, deviceMac);
        }
        stmt.bindLong(4, entity.getI());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(5, name);
        }
        stmt.bindDouble(6, entity.getData());
        stmt.bindDouble(7, entity.getFactor());
        stmt.bindDouble(8, entity.getResult());
 
        String unit = entity.getUnit();
        if (unit != null) {
            stmt.bindString(9, unit);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Table entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getDeviceId());
 
        String deviceMac = entity.getDeviceMac();
        if (deviceMac != null) {
            stmt.bindString(3, deviceMac);
        }
        stmt.bindLong(4, entity.getI());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(5, name);
        }
        stmt.bindDouble(6, entity.getData());
        stmt.bindDouble(7, entity.getFactor());
        stmt.bindDouble(8, entity.getResult());
 
        String unit = entity.getUnit();
        if (unit != null) {
            stmt.bindString(9, unit);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Table readEntity(Cursor cursor, int offset) {
        Table entity = new Table( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // deviceId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // deviceMac
            cursor.getInt(offset + 3), // i
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // name
            cursor.getDouble(offset + 5), // data
            cursor.getDouble(offset + 6), // factor
            cursor.getDouble(offset + 7), // result
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // unit
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Table entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDeviceId(cursor.getLong(offset + 1));
        entity.setDeviceMac(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setI(cursor.getInt(offset + 3));
        entity.setName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setData(cursor.getDouble(offset + 5));
        entity.setFactor(cursor.getDouble(offset + 6));
        entity.setResult(cursor.getDouble(offset + 7));
        entity.setUnit(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Table entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Table entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Table entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
