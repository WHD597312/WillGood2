package com.peihou.willgood2.database.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.peihou.willgood2.pojo.Link;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LINK".
*/
public class LinkDao extends AbstractDao<Link, Long> {

    public static final String TABLENAME = "LINK";

    /**
     * Properties of entity Link.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property DeviceId = new Property(1, long.class, "deviceId", false, "DEVICE_ID");
        public final static Property Type = new Property(2, int.class, "type", false, "TYPE");
        public final static Property Check = new Property(3, boolean.class, "check", false, "CHECK");
        public final static Property McuVersion = new Property(4, int.class, "mcuVersion", false, "MCU_VERSION");
        public final static Property Control = new Property(5, int.class, "control", false, "CONTROL");
        public final static Property Setting = new Property(6, int.class, "setting", false, "SETTING");
        public final static Property Condition = new Property(7, int.class, "condition", false, "CONDITION");
        public final static Property Preline = new Property(8, int.class, "preline", false, "PRELINE");
        public final static Property Lastline = new Property(9, int.class, "lastline", false, "LASTLINE");
        public final static Property TriType = new Property(10, int.class, "triType", false, "TRI_TYPE");
        public final static Property Name = new Property(11, String.class, "name", false, "NAME");
    }


    public LinkDao(DaoConfig config) {
        super(config);
    }
    
    public LinkDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LINK\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"DEVICE_ID\" INTEGER NOT NULL ," + // 1: deviceId
                "\"TYPE\" INTEGER NOT NULL ," + // 2: type
                "\"CHECK\" INTEGER NOT NULL ," + // 3: check
                "\"MCU_VERSION\" INTEGER NOT NULL ," + // 4: mcuVersion
                "\"CONTROL\" INTEGER NOT NULL ," + // 5: control
                "\"SETTING\" INTEGER NOT NULL ," + // 6: setting
                "\"CONDITION\" INTEGER NOT NULL ," + // 7: condition
                "\"PRELINE\" INTEGER NOT NULL ," + // 8: preline
                "\"LASTLINE\" INTEGER NOT NULL ," + // 9: lastline
                "\"TRI_TYPE\" INTEGER NOT NULL ," + // 10: triType
                "\"NAME\" TEXT);"); // 11: name
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LINK\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Link entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getDeviceId());
        stmt.bindLong(3, entity.getType());
        stmt.bindLong(4, entity.getCheck() ? 1L: 0L);
        stmt.bindLong(5, entity.getMcuVersion());
        stmt.bindLong(6, entity.getControl());
        stmt.bindLong(7, entity.getSetting());
        stmt.bindLong(8, entity.getCondition());
        stmt.bindLong(9, entity.getPreline());
        stmt.bindLong(10, entity.getLastline());
        stmt.bindLong(11, entity.getTriType());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(12, name);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Link entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getDeviceId());
        stmt.bindLong(3, entity.getType());
        stmt.bindLong(4, entity.getCheck() ? 1L: 0L);
        stmt.bindLong(5, entity.getMcuVersion());
        stmt.bindLong(6, entity.getControl());
        stmt.bindLong(7, entity.getSetting());
        stmt.bindLong(8, entity.getCondition());
        stmt.bindLong(9, entity.getPreline());
        stmt.bindLong(10, entity.getLastline());
        stmt.bindLong(11, entity.getTriType());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(12, name);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Link readEntity(Cursor cursor, int offset) {
        Link entity = new Link( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // deviceId
            cursor.getInt(offset + 2), // type
            cursor.getShort(offset + 3) != 0, // check
            cursor.getInt(offset + 4), // mcuVersion
            cursor.getInt(offset + 5), // control
            cursor.getInt(offset + 6), // setting
            cursor.getInt(offset + 7), // condition
            cursor.getInt(offset + 8), // preline
            cursor.getInt(offset + 9), // lastline
            cursor.getInt(offset + 10), // triType
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // name
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Link entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDeviceId(cursor.getLong(offset + 1));
        entity.setType(cursor.getInt(offset + 2));
        entity.setCheck(cursor.getShort(offset + 3) != 0);
        entity.setMcuVersion(cursor.getInt(offset + 4));
        entity.setControl(cursor.getInt(offset + 5));
        entity.setSetting(cursor.getInt(offset + 6));
        entity.setCondition(cursor.getInt(offset + 7));
        entity.setPreline(cursor.getInt(offset + 8));
        entity.setLastline(cursor.getInt(offset + 9));
        entity.setTriType(cursor.getInt(offset + 10));
        entity.setName(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Link entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Link entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Link entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
