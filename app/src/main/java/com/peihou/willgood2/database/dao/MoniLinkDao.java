package com.peihou.willgood2.database.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.peihou.willgood2.pojo.MoniLink;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MONI_LINK".
*/
public class MoniLinkDao extends AbstractDao<MoniLink, Long> {

    public static final String TABLENAME = "MONI_LINK";

    /**
     * Properties of entity MoniLink.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Type = new Property(2, int.class, "type", false, "TYPE");
        public final static Property Num = new Property(3, int.class, "num", false, "NUM");
        public final static Property Contition = new Property(4, int.class, "contition", false, "CONTITION");
        public final static Property TriState = new Property(5, int.class, "triState", false, "TRI_STATE");
        public final static Property PreLine = new Property(6, int.class, "preLine", false, "PRE_LINE");
        public final static Property LastLine = new Property(7, int.class, "lastLine", false, "LAST_LINE");
        public final static Property ControlState = new Property(8, int.class, "controlState", false, "CONTROL_STATE");
        public final static Property TriType = new Property(9, int.class, "triType", false, "TRI_TYPE");
        public final static Property State = new Property(10, int.class, "state", false, "STATE");
        public final static Property ControlType = new Property(11, int.class, "controlType", false, "CONTROL_TYPE");
        public final static Property DeviceMac = new Property(12, String.class, "deviceMac", false, "DEVICE_MAC");
        public final static Property McuVersion = new Property(13, int.class, "mcuVersion", false, "MCU_VERSION");
        public final static Property Lines = new Property(14, String.class, "lines", false, "LINES");
        public final static Property Visitity = new Property(15, int.class, "visitity", false, "VISITITY");
    }


    public MoniLinkDao(DaoConfig config) {
        super(config);
    }
    
    public MoniLinkDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MONI_LINK\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"TYPE\" INTEGER NOT NULL ," + // 2: type
                "\"NUM\" INTEGER NOT NULL ," + // 3: num
                "\"CONTITION\" INTEGER NOT NULL ," + // 4: contition
                "\"TRI_STATE\" INTEGER NOT NULL ," + // 5: triState
                "\"PRE_LINE\" INTEGER NOT NULL ," + // 6: preLine
                "\"LAST_LINE\" INTEGER NOT NULL ," + // 7: lastLine
                "\"CONTROL_STATE\" INTEGER NOT NULL ," + // 8: controlState
                "\"TRI_TYPE\" INTEGER NOT NULL ," + // 9: triType
                "\"STATE\" INTEGER NOT NULL ," + // 10: state
                "\"CONTROL_TYPE\" INTEGER NOT NULL ," + // 11: controlType
                "\"DEVICE_MAC\" TEXT," + // 12: deviceMac
                "\"MCU_VERSION\" INTEGER NOT NULL ," + // 13: mcuVersion
                "\"LINES\" TEXT," + // 14: lines
                "\"VISITITY\" INTEGER NOT NULL );"); // 15: visitity
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MONI_LINK\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MoniLink entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
        stmt.bindLong(3, entity.getType());
        stmt.bindLong(4, entity.getNum());
        stmt.bindLong(5, entity.getContition());
        stmt.bindLong(6, entity.getTriState());
        stmt.bindLong(7, entity.getPreLine());
        stmt.bindLong(8, entity.getLastLine());
        stmt.bindLong(9, entity.getControlState());
        stmt.bindLong(10, entity.getTriType());
        stmt.bindLong(11, entity.getState());
        stmt.bindLong(12, entity.getControlType());
 
        String deviceMac = entity.getDeviceMac();
        if (deviceMac != null) {
            stmt.bindString(13, deviceMac);
        }
        stmt.bindLong(14, entity.getMcuVersion());
 
        String lines = entity.getLines();
        if (lines != null) {
            stmt.bindString(15, lines);
        }
        stmt.bindLong(16, entity.getVisitity());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MoniLink entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
        stmt.bindLong(3, entity.getType());
        stmt.bindLong(4, entity.getNum());
        stmt.bindLong(5, entity.getContition());
        stmt.bindLong(6, entity.getTriState());
        stmt.bindLong(7, entity.getPreLine());
        stmt.bindLong(8, entity.getLastLine());
        stmt.bindLong(9, entity.getControlState());
        stmt.bindLong(10, entity.getTriType());
        stmt.bindLong(11, entity.getState());
        stmt.bindLong(12, entity.getControlType());
 
        String deviceMac = entity.getDeviceMac();
        if (deviceMac != null) {
            stmt.bindString(13, deviceMac);
        }
        stmt.bindLong(14, entity.getMcuVersion());
 
        String lines = entity.getLines();
        if (lines != null) {
            stmt.bindString(15, lines);
        }
        stmt.bindLong(16, entity.getVisitity());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public MoniLink readEntity(Cursor cursor, int offset) {
        MoniLink entity = new MoniLink( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.getInt(offset + 2), // type
            cursor.getInt(offset + 3), // num
            cursor.getInt(offset + 4), // contition
            cursor.getInt(offset + 5), // triState
            cursor.getInt(offset + 6), // preLine
            cursor.getInt(offset + 7), // lastLine
            cursor.getInt(offset + 8), // controlState
            cursor.getInt(offset + 9), // triType
            cursor.getInt(offset + 10), // state
            cursor.getInt(offset + 11), // controlType
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // deviceMac
            cursor.getInt(offset + 13), // mcuVersion
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // lines
            cursor.getInt(offset + 15) // visitity
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MoniLink entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setType(cursor.getInt(offset + 2));
        entity.setNum(cursor.getInt(offset + 3));
        entity.setContition(cursor.getInt(offset + 4));
        entity.setTriState(cursor.getInt(offset + 5));
        entity.setPreLine(cursor.getInt(offset + 6));
        entity.setLastLine(cursor.getInt(offset + 7));
        entity.setControlState(cursor.getInt(offset + 8));
        entity.setTriType(cursor.getInt(offset + 9));
        entity.setState(cursor.getInt(offset + 10));
        entity.setControlType(cursor.getInt(offset + 11));
        entity.setDeviceMac(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setMcuVersion(cursor.getInt(offset + 13));
        entity.setLines(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setVisitity(cursor.getInt(offset + 15));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MoniLink entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MoniLink entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MoniLink entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
