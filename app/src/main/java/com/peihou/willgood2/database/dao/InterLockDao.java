package com.peihou.willgood2.database.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.peihou.willgood2.pojo.InterLock;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "INTER_LOCK".
*/
public class InterLockDao extends AbstractDao<InterLock, Long> {

    public static final String TABLENAME = "INTER_LOCK";

    /**
     * Properties of entity InterLock.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Name2 = new Property(2, String.class, "name2", false, "NAME2");
        public final static Property DeviceMac = new Property(3, String.class, "deviceMac", false, "DEVICE_MAC");
        public final static Property I = new Property(4, int.class, "i", false, "I");
        public final static Property DeviceLineNum = new Property(5, int.class, "deviceLineNum", false, "DEVICE_LINE_NUM");
        public final static Property DeviceLineNum2 = new Property(6, int.class, "deviceLineNum2", false, "DEVICE_LINE_NUM2");
        public final static Property Visitity = new Property(7, int.class, "visitity", false, "VISITITY");
        public final static Property Operate = new Property(8, int.class, "operate", false, "OPERATE");
    }


    public InterLockDao(DaoConfig config) {
        super(config);
    }
    
    public InterLockDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"INTER_LOCK\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"NAME2\" TEXT," + // 2: name2
                "\"DEVICE_MAC\" TEXT," + // 3: deviceMac
                "\"I\" INTEGER NOT NULL ," + // 4: i
                "\"DEVICE_LINE_NUM\" INTEGER NOT NULL ," + // 5: deviceLineNum
                "\"DEVICE_LINE_NUM2\" INTEGER NOT NULL ," + // 6: deviceLineNum2
                "\"VISITITY\" INTEGER NOT NULL ," + // 7: visitity
                "\"OPERATE\" INTEGER NOT NULL );"); // 8: operate
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"INTER_LOCK\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, InterLock entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String name2 = entity.getName2();
        if (name2 != null) {
            stmt.bindString(3, name2);
        }
 
        String deviceMac = entity.getDeviceMac();
        if (deviceMac != null) {
            stmt.bindString(4, deviceMac);
        }
        stmt.bindLong(5, entity.getI());
        stmt.bindLong(6, entity.getDeviceLineNum());
        stmt.bindLong(7, entity.getDeviceLineNum2());
        stmt.bindLong(8, entity.getVisitity());
        stmt.bindLong(9, entity.getOperate());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, InterLock entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String name2 = entity.getName2();
        if (name2 != null) {
            stmt.bindString(3, name2);
        }
 
        String deviceMac = entity.getDeviceMac();
        if (deviceMac != null) {
            stmt.bindString(4, deviceMac);
        }
        stmt.bindLong(5, entity.getI());
        stmt.bindLong(6, entity.getDeviceLineNum());
        stmt.bindLong(7, entity.getDeviceLineNum2());
        stmt.bindLong(8, entity.getVisitity());
        stmt.bindLong(9, entity.getOperate());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public InterLock readEntity(Cursor cursor, int offset) {
        InterLock entity = new InterLock( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name2
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // deviceMac
            cursor.getInt(offset + 4), // i
            cursor.getInt(offset + 5), // deviceLineNum
            cursor.getInt(offset + 6), // deviceLineNum2
            cursor.getInt(offset + 7), // visitity
            cursor.getInt(offset + 8) // operate
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, InterLock entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName2(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDeviceMac(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setI(cursor.getInt(offset + 4));
        entity.setDeviceLineNum(cursor.getInt(offset + 5));
        entity.setDeviceLineNum2(cursor.getInt(offset + 6));
        entity.setVisitity(cursor.getInt(offset + 7));
        entity.setOperate(cursor.getInt(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(InterLock entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(InterLock entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(InterLock entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
