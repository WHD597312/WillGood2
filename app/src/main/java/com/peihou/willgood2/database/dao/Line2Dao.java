package com.peihou.willgood2.database.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.peihou.willgood2.pojo.Line2;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LINE2".
*/
public class Line2Dao extends AbstractDao<Line2, Long> {

    public static final String TABLENAME = "LINE2";

    /**
     * Properties of entity Line2.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Click = new Property(1, int.class, "click", false, "CLICK");
        public final static Property DeviceMac = new Property(2, String.class, "deviceMac", false, "DEVICE_MAC");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
        public final static Property Seconds = new Property(4, double.class, "seconds", false, "SECONDS");
        public final static Property Open = new Property(5, boolean.class, "open", false, "OPEN");
        public final static Property DeviceLineNum = new Property(6, int.class, "deviceLineNum", false, "DEVICE_LINE_NUM");
        public final static Property DeviceId = new Property(7, long.class, "deviceId", false, "DEVICE_ID");
        public final static Property Online = new Property(8, boolean.class, "online", false, "ONLINE");
        public final static Property Jog = new Property(9, boolean.class, "jog", false, "JOG");
        public final static Property TimerId = new Property(10, long.class, "timerId", false, "TIMER_ID");
        public final static Property TimerChecked = new Property(11, int.class, "timerChecked", false, "TIMER_CHECKED");
        public final static Property Lock = new Property(12, int.class, "lock", false, "LOCK");
        public final static Property InterLock = new Property(13, String.class, "interLock", false, "INTER_LOCK");
    }


    public Line2Dao(DaoConfig config) {
        super(config);
    }
    
    public Line2Dao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LINE2\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"CLICK\" INTEGER NOT NULL ," + // 1: click
                "\"DEVICE_MAC\" TEXT," + // 2: deviceMac
                "\"NAME\" TEXT," + // 3: name
                "\"SECONDS\" REAL NOT NULL ," + // 4: seconds
                "\"OPEN\" INTEGER NOT NULL ," + // 5: open
                "\"DEVICE_LINE_NUM\" INTEGER NOT NULL ," + // 6: deviceLineNum
                "\"DEVICE_ID\" INTEGER NOT NULL ," + // 7: deviceId
                "\"ONLINE\" INTEGER NOT NULL ," + // 8: online
                "\"JOG\" INTEGER NOT NULL ," + // 9: jog
                "\"TIMER_ID\" INTEGER NOT NULL ," + // 10: timerId
                "\"TIMER_CHECKED\" INTEGER NOT NULL ," + // 11: timerChecked
                "\"LOCK\" INTEGER NOT NULL ," + // 12: lock
                "\"INTER_LOCK\" TEXT);"); // 13: interLock
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LINE2\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Line2 entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getClick());
 
        String deviceMac = entity.getDeviceMac();
        if (deviceMac != null) {
            stmt.bindString(3, deviceMac);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
        stmt.bindDouble(5, entity.getSeconds());
        stmt.bindLong(6, entity.getOpen() ? 1L: 0L);
        stmt.bindLong(7, entity.getDeviceLineNum());
        stmt.bindLong(8, entity.getDeviceId());
        stmt.bindLong(9, entity.getOnline() ? 1L: 0L);
        stmt.bindLong(10, entity.getJog() ? 1L: 0L);
        stmt.bindLong(11, entity.getTimerId());
        stmt.bindLong(12, entity.getTimerChecked());
        stmt.bindLong(13, entity.getLock());
 
        String interLock = entity.getInterLock();
        if (interLock != null) {
            stmt.bindString(14, interLock);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Line2 entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getClick());
 
        String deviceMac = entity.getDeviceMac();
        if (deviceMac != null) {
            stmt.bindString(3, deviceMac);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
        stmt.bindDouble(5, entity.getSeconds());
        stmt.bindLong(6, entity.getOpen() ? 1L: 0L);
        stmt.bindLong(7, entity.getDeviceLineNum());
        stmt.bindLong(8, entity.getDeviceId());
        stmt.bindLong(9, entity.getOnline() ? 1L: 0L);
        stmt.bindLong(10, entity.getJog() ? 1L: 0L);
        stmt.bindLong(11, entity.getTimerId());
        stmt.bindLong(12, entity.getTimerChecked());
        stmt.bindLong(13, entity.getLock());
 
        String interLock = entity.getInterLock();
        if (interLock != null) {
            stmt.bindString(14, interLock);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Line2 readEntity(Cursor cursor, int offset) {
        Line2 entity = new Line2( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // click
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // deviceMac
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // name
            cursor.getDouble(offset + 4), // seconds
            cursor.getShort(offset + 5) != 0, // open
            cursor.getInt(offset + 6), // deviceLineNum
            cursor.getLong(offset + 7), // deviceId
            cursor.getShort(offset + 8) != 0, // online
            cursor.getShort(offset + 9) != 0, // jog
            cursor.getLong(offset + 10), // timerId
            cursor.getInt(offset + 11), // timerChecked
            cursor.getInt(offset + 12), // lock
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13) // interLock
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Line2 entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setClick(cursor.getInt(offset + 1));
        entity.setDeviceMac(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSeconds(cursor.getDouble(offset + 4));
        entity.setOpen(cursor.getShort(offset + 5) != 0);
        entity.setDeviceLineNum(cursor.getInt(offset + 6));
        entity.setDeviceId(cursor.getLong(offset + 7));
        entity.setOnline(cursor.getShort(offset + 8) != 0);
        entity.setJog(cursor.getShort(offset + 9) != 0);
        entity.setTimerId(cursor.getLong(offset + 10));
        entity.setTimerChecked(cursor.getInt(offset + 11));
        entity.setLock(cursor.getInt(offset + 12));
        entity.setInterLock(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Line2 entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Line2 entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Line2 entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
